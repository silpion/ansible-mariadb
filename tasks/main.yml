---
- name: Assert mandatory variables
  tags: mariadb
  assert:
    that: mariadb_root_db_pass is defined

- name: Add the OS specific variables
  tags: mariadb
  include_vars: "{{ ansible_os_family }}.yml"

- name: Include MariaDB dump tasks
  tags: mariadb
  when: mariadb_backupjobs|length > 0
  include: dump.yml

- name: Install the mariadb packages in Redhat derivatives
  tags: mariadb
  with_items: mariadb_pkgs
  when: ansible_os_family == 'RedHat'
  become: true
  yum:
    state: present
    name: "{{ item }}"

- name: Install the mariadb packages in Debian derivatives
  tags: mariadb
  with_items: mariadb_pkgs
  when: ansible_os_family == 'Debian'
  become: true
  apt:
    state: present
    name: "{{ item }}"
    update_cache: true

- name: Copy the my.cnf file
  tags: mariadb
  notify: service restart mariadb
  become: true
  template:
    src: "my.cnf.{{ ansible_os_family }}.j2"
    dest: "{{ mariadb_conf_dir }}/my.cnf"

- name: Start and enable the mariadb service
  tags: mariadb
  become: true
  service:
    state: started
    name: "{{ mariadb_service }}"
    enabled: true

- name: Update mariadb root password for all root accounts
  tags: mariadb
  with_items:
   - "{{ ansible_hostname }}"
   - 127.0.0.1
   - ::1
   - localhost
  become: true
  mysql_user:
    name: root
    host: "{{ item }}"
    password: "{{ mariadb_root_db_pass }}"

- name: Copy .my.cnf file with root password credentials
  tags: mariadb
  become: true
  template:
    src: .my.cnf.j2
    dest: /root/.my.cnf
    mode: 0600

- name: Ensure anonymous users are not in the database
  tags: mariadb
  with_items:
   - localhost
   - "{{ ansible_hostname }}"
  become: true
  mysql_user:
    state: absent
    name: ""
    host: "{{ item }}"

- name: Remove the test database
  tags: mariadb
  become: true
  mysql_db:
    state: absent
    name: test

- name: Create the databases
  tags: mariadb
  with_items: mariadb_db
  become: true
  mysql_db:
    state: "{{ item.state|default('present') }}"
    name: "{{ item.name|default(item) }}"
    collation: "{{ item.collation|default(omit) }}"
    encoding: "{{ item.encoding|default(omit) }}"
    login_host: "{{ item.login_host|default('localhost') }}"
    login_password: "{{ item.login_password|default(mariadb_root_db_pass) }}"
    login_port: "{{ item.login_port|default(mariadb_port) }}"
    login_unix_socket: "{{ item.login_unix_socket|default(omit) }}"
    login_user: "{{ item.login_user|default('root') }}"
    target: "{{ item.target|default(omit) }}"

- name: Create the database users
  tags: mariadb
  no_log: true
  with_items: mariadb_users_create
  become: true
  mysql_user:
    state: present
    name: "{{ item.name }}"
    password: "{{ item.pass }}"
    priv: "{{ item.priv|default('*.*:ALL') }}"
    host: "{{ item.host|default('localhost') }}"
    append_privs: "{{ item.append_privs|default('no') }}"

- name: Create the replication users
  tags: mariadb
  with_items: mariadb_repl_user
  become: true
  when: mariadb_repl_role == 'master'
  mysql_user:
    state: present
    name: "{{ item.name }}"
    host: "%"
    password: "{{ item.pass }}"
    priv: "*.*:'REPLICATION SLAVE'"

- name: Check if slave is already configured for replication
  tags: mariadb
  register: slave
  ignore_errors: true
  changed_when: false
  always_run: true
  when: mariadb_repl_role == 'slave'
  become: true
  mysql_replication:
    mode: getslave

- name: Ensure the hostname entry for master is available for the client
  tags: mariadb
  become: true
  when:
    - slave|failed
    - mariadb_repl_role == 'slave'
    - mariadb_repl_master is defined
  lineinfile:
    state: present
    dest: /etc/hosts
    regexp: "{{ mariadb_repl_master }}"
    line: "{{ mariadb_repl_master + '   ' +  hostvars[mariadb_repl_master].ansible_default_ipv4.address }}"

- name: Get the current master servers replication status
  tags: mariadb
  register: repl_stat
  delegate_to: "{{ mariadb_repl_master }}"
  become: true
  when:
    - slave|failed
    - mariadb_repl_role == 'slave'
    - mariadb_repl_master is defined
  mysql_replication:
    mode: getmaster

- name: Change the master in slave to start the replication
  tags: mariadb
  become: true
  when:
    - slave|failed
    - mariadb_repl_role == 'slave'
    - mariadb_repl_master is defined
  mysql_replication:
    mode: changemaster
    master_host: "{{ mariadb_repl_master }}"
    master_log_file: "{{ repl_stat.File }}"
    master_log_pos: "{{ repl_stat.Position }}"
    master_user: "{{ mariadb_repl_user[0].name }}"
    master_password: "{{ mariadb_repl_user[0].pass }}"

- name: Apply additional mariadb configuration
  tags: mariadb
  notify: service restart mariadb
  with_items: mariadb_config
  become: true
  ini_file:
    dest: "{{ mariadb_confd_dir }}/{{ mariadb_confd_file }}"
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
